
BasicPwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  000007f0  2**0
                  ALLOC
  2 .stab         00002034  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a3  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00002ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a37  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c4  00000000  00000000  0000399f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060d  00000000  00000000  00003d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00004370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000202  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004af  00000000  00000000  00004722  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00004bd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

double dutyCycle = 0;
char buffer[10];
int main(void)
{
	DDRB = (1 << PINB3);
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1<<CS00); //| (1<<CS02);//prescaler of 1024 just for fast increase
  96:	89 e6       	ldi	r24, 0x69	; 105
  98:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57
	
	OCR0 = (dutyCycle/100.0)*255.0;
  9e:	60 91 60 00 	lds	r22, 0x0060
  a2:	70 91 61 00 	lds	r23, 0x0061
  a6:	80 91 62 00 	lds	r24, 0x0062
  aa:	90 91 63 00 	lds	r25, 0x0063
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	48 ec       	ldi	r20, 0xC8	; 200
  b4:	52 e4       	ldi	r21, 0x42	; 66
  b6:	0e 94 4c 02 	call	0x498	; 0x498 <__divsf3>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	4f e7       	ldi	r20, 0x7F	; 127
  c0:	53 e4       	ldi	r21, 0x43	; 67
  c2:	0e 94 35 03 	call	0x66a	; 0x66a <__mulsf3>
  c6:	0e 94 b4 02 	call	0x568	; 0x568 <__fixunssfsi>
  ca:	6c bf       	out	0x3c, r22	; 60
	
	sei();
  cc:	78 94       	sei
		_delay_ms(100);
		dutyCycle += 10;
		
		if(dutyCycle > 100)
		{
			dutyCycle = 0;
  ce:	0f 2e       	mov	r0, r31
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	cf 2e       	mov	r12, r31
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	df 2e       	mov	r13, r31
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ef 2e       	mov	r14, r31
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ff 2e       	mov	r15, r31
  e0:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	91 ee       	ldi	r25, 0xE1	; 225
  e6:	a4 e0       	ldi	r26, 0x04	; 4
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x56>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x60>
  f2:	00 00       	nop
	sei();
	
	while(1)
	{
		_delay_ms(100);
		dutyCycle += 10;
  f4:	60 91 60 00 	lds	r22, 0x0060
  f8:	70 91 61 00 	lds	r23, 0x0061
  fc:	80 91 62 00 	lds	r24, 0x0062
 100:	90 91 63 00 	lds	r25, 0x0063
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e2       	ldi	r20, 0x20	; 32
 10a:	51 e4       	ldi	r21, 0x41	; 65
 10c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__addsf3>
 110:	26 2f       	mov	r18, r22
 112:	37 2f       	mov	r19, r23
 114:	f8 2f       	mov	r31, r24
 116:	e9 2f       	mov	r30, r25
 118:	46 2f       	mov	r20, r22
 11a:	57 2f       	mov	r21, r23
 11c:	68 2f       	mov	r22, r24
 11e:	79 2f       	mov	r23, r25
 120:	40 93 60 00 	sts	0x0060, r20
 124:	50 93 61 00 	sts	0x0061, r21
 128:	60 93 62 00 	sts	0x0062, r22
 12c:	70 93 63 00 	sts	0x0063, r23
		
		if(dutyCycle > 100)
 130:	82 2f       	mov	r24, r18
 132:	93 2f       	mov	r25, r19
 134:	af 2f       	mov	r26, r31
 136:	be 2f       	mov	r27, r30
 138:	bc 01       	movw	r22, r24
 13a:	cd 01       	movw	r24, r26
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	48 ec       	ldi	r20, 0xC8	; 200
 142:	52 e4       	ldi	r21, 0x42	; 66
 144:	0e 94 31 03 	call	0x662	; 0x662 <__gesf2>
 148:	18 16       	cp	r1, r24
 14a:	5c f6       	brge	.-106    	; 0xe2 <main+0x50>
		{
			dutyCycle = 0;
 14c:	c0 92 60 00 	sts	0x0060, r12
 150:	d0 92 61 00 	sts	0x0061, r13
 154:	e0 92 62 00 	sts	0x0062, r14
 158:	f0 92 63 00 	sts	0x0063, r15
 15c:	c2 cf       	rjmp	.-124    	; 0xe2 <main+0x50>

0000015e <__vector_9>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	OCR0 = (dutyCycle/100.0)*255;
 180:	60 91 60 00 	lds	r22, 0x0060
 184:	70 91 61 00 	lds	r23, 0x0061
 188:	80 91 62 00 	lds	r24, 0x0062
 18c:	90 91 63 00 	lds	r25, 0x0063
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	48 ec       	ldi	r20, 0xC8	; 200
 196:	52 e4       	ldi	r21, 0x42	; 66
 198:	0e 94 4c 02 	call	0x498	; 0x498 <__divsf3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	4f e7       	ldi	r20, 0x7F	; 127
 1a2:	53 e4       	ldi	r21, 0x43	; 67
 1a4:	0e 94 35 03 	call	0x66a	; 0x66a <__mulsf3>
 1a8:	0e 94 b4 02 	call	0x568	; 0x568 <__fixunssfsi>
 1ac:	6c bf       	out	0x3c, r22	; 60
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1d0:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 1d4:	c2 98       	cbi	0x18, 2	; 24
}
 1d6:	08 95       	ret

000001d8 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1d8:	cf 93       	push	r28
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 1da:	66 23       	and	r22, r22
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <lcd_write+0xa>
       lcd_rs_high();
 1de:	c0 9a       	sbi	0x18, 0	; 24
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <lcd_write+0xc>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1e2:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();    /* RW=0  write mode      */
 1e4:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1e6:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1e8:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1ea:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1ec:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1ee:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1f0:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1f2:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1f4:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1f6:	88 23       	and	r24, r24
 1f8:	0c f4       	brge	.+2      	; 0x1fc <lcd_write+0x24>
 1fa:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1fc:	c8 2f       	mov	r28, r24
 1fe:	86 fd       	sbrc	r24, 6
 200:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 202:	c5 fd       	sbrc	r28, 5
 204:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 206:	c4 fd       	sbrc	r28, 4
 208:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();
 20a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 20e:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 210:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 212:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 214:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 216:	c3 fd       	sbrc	r28, 3
 218:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 21a:	c2 fd       	sbrc	r28, 2
 21c:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 21e:	c1 fd       	sbrc	r28, 1
 220:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 222:	c0 fd       	sbrc	r28, 0
 224:	c4 9a       	sbi	0x18, 4	; 24
        lcd_e_toggle();        
 226:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 22a:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 22c:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 22e:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 230:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 236:	88 23       	and	r24, r24
 238:	11 f0       	breq	.+4      	; 0x23e <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 23a:	c0 9a       	sbi	0x18, 0	; 24
 23c:	01 c0       	rjmp	.+2      	; 0x240 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 23e:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 240:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 242:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 244:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 246:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 248:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 24a:	c2 9a       	sbi	0x18, 2	; 24
 24c:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 24e:	b4 99       	sbic	0x16, 4	; 22
 250:	02 c0       	rjmp	.+4      	; 0x256 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	01 c0       	rjmp	.+2      	; 0x258 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 256:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 258:	b5 99       	sbic	0x16, 5	; 22
 25a:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 25c:	b6 99       	sbic	0x16, 6	; 22
 25e:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 260:	b7 99       	sbic	0x16, 7	; 22
 262:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 264:	c2 98       	cbi	0x18, 2	; 24
 266:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 268:	c2 9a       	sbi	0x18, 2	; 24
 26a:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 26c:	b4 99       	sbic	0x16, 4	; 22
 26e:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 270:	b5 99       	sbic	0x16, 5	; 22
 272:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 274:	b6 99       	sbic	0x16, 6	; 22
 276:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 278:	b7 99       	sbic	0x16, 7	; 22
 27a:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 27c:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 27e:	08 95       	ret

00000280 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_read>
 286:	88 23       	and	r24, r24
 288:	dc f3       	brlt	.-10     	; 0x280 <lcd_waitbusy>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_waitbusy+0xc>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_read>
    
}/* lcd_waitbusy */
 294:	08 95       	ret

00000296 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 296:	cf 93       	push	r28
 298:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 29a:	0e 94 40 01 	call	0x280	; 0x280 <lcd_waitbusy>
    lcd_write(cmd,0);
 29e:	8c 2f       	mov	r24, r28
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write>
}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2aa:	cf 93       	push	r28
 2ac:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 2ae:	0e 94 40 01 	call	0x280	; 0x280 <lcd_waitbusy>
    lcd_write(data,1);
 2b2:	8c 2f       	mov	r24, r28
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write>
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2be:	66 23       	and	r22, r22
 2c0:	21 f4       	brne	.+8      	; 0x2ca <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2c2:	80 58       	subi	r24, 0x80	; 128
 2c4:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
 2c8:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2ca:	80 54       	subi	r24, 0x40	; 64
 2cc:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
 2d0:	08 95       	ret

000002d2 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2d2:	0e 94 40 01 	call	0x280	; 0x280 <lcd_waitbusy>
}
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret

000002da <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
}
 2e0:	08 95       	ret

000002e2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
}
 2e8:	08 95       	ret

000002ea <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2ea:	cf 93       	push	r28
 2ec:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2ee:	0e 94 40 01 	call	0x280	; 0x280 <lcd_waitbusy>
    if (c=='\n')
 2f2:	ca 30       	cpi	r28, 0x0A	; 10
 2f4:	49 f4       	brne	.+18     	; 0x308 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 2f6:	80 34       	cpi	r24, 0x40	; 64
 2f8:	10 f4       	brcc	.+4      	; 0x2fe <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 2fa:	80 e4       	ldi	r24, 0x40	; 64
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 300:	80 58       	subi	r24, 0x80	; 128
 302:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
 306:	04 c0       	rjmp	.+8      	; 0x310 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 308:	8c 2f       	mov	r24, r28
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write>
    }

}/* lcd_putc */
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 31a:	88 81       	ld	r24, Y
 31c:	88 23       	and	r24, r24
 31e:	31 f0       	breq	.+12     	; 0x32c <lcd_puts+0x18>
 320:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 322:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 326:	89 91       	ld	r24, Y+
 328:	88 23       	and	r24, r24
 32a:	d9 f7       	brne	.-10     	; 0x322 <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 338:	fc 01       	movw	r30, r24
 33a:	84 91       	lpm	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	41 f0       	breq	.+16     	; 0x350 <lcd_puts_p+0x1e>
 340:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 342:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 346:	fe 01       	movw	r30, r28
 348:	21 96       	adiw	r28, 0x01	; 1
 34a:	84 91       	lpm	r24, Z
 34c:	88 23       	and	r24, r24
 34e:	c9 f7       	brne	.-14     	; 0x342 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 356:	cf 93       	push	r28
 358:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 35a:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 35c:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 35e:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 360:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 362:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 364:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 366:	bf 9a       	sbi	0x17, 7	; 23
 368:	8f e9       	ldi	r24, 0x9F	; 159
 36a:	9f e0       	ldi	r25, 0x0F	; 15
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x16>
 370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_init+0x1c>
 372:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 374:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 376:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 378:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 37c:	81 ee       	ldi	r24, 0xE1	; 225
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x2a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init+0x30>
 386:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 388:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 38c:	95 e1       	ldi	r25, 0x15	; 21
 38e:	9a 95       	dec	r25
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_init+0x38>
 392:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 394:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 398:	85 e1       	ldi	r24, 0x15	; 21
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_init+0x44>
 39e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3a0:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 3a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 3a6:	95 e1       	ldi	r25, 0x15	; 21
 3a8:	9a 95       	dec	r25
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x52>
 3ac:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3ba:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3c4:	8c 2f       	mov	r24, r28
 3c6:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_command>

}/* lcd_init */
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <__subsf3>:
 3ce:	50 58       	subi	r21, 0x80	; 128

000003d0 <__addsf3>:
 3d0:	bb 27       	eor	r27, r27
 3d2:	aa 27       	eor	r26, r26
 3d4:	0e d0       	rcall	.+28     	; 0x3f2 <__addsf3x>
 3d6:	0b c1       	rjmp	.+534    	; 0x5ee <__fp_round>
 3d8:	fc d0       	rcall	.+504    	; 0x5d2 <__fp_pscA>
 3da:	30 f0       	brcs	.+12     	; 0x3e8 <__addsf3+0x18>
 3dc:	01 d1       	rcall	.+514    	; 0x5e0 <__fp_pscB>
 3de:	20 f0       	brcs	.+8      	; 0x3e8 <__addsf3+0x18>
 3e0:	31 f4       	brne	.+12     	; 0x3ee <__addsf3+0x1e>
 3e2:	9f 3f       	cpi	r25, 0xFF	; 255
 3e4:	11 f4       	brne	.+4      	; 0x3ea <__addsf3+0x1a>
 3e6:	1e f4       	brtc	.+6      	; 0x3ee <__addsf3+0x1e>
 3e8:	f1 c0       	rjmp	.+482    	; 0x5cc <__fp_nan>
 3ea:	0e f4       	brtc	.+2      	; 0x3ee <__addsf3+0x1e>
 3ec:	e0 95       	com	r30
 3ee:	e7 fb       	bst	r30, 7
 3f0:	e7 c0       	rjmp	.+462    	; 0x5c0 <__fp_inf>

000003f2 <__addsf3x>:
 3f2:	e9 2f       	mov	r30, r25
 3f4:	0d d1       	rcall	.+538    	; 0x610 <__fp_split3>
 3f6:	80 f3       	brcs	.-32     	; 0x3d8 <__addsf3+0x8>
 3f8:	ba 17       	cp	r27, r26
 3fa:	62 07       	cpc	r22, r18
 3fc:	73 07       	cpc	r23, r19
 3fe:	84 07       	cpc	r24, r20
 400:	95 07       	cpc	r25, r21
 402:	18 f0       	brcs	.+6      	; 0x40a <__addsf3x+0x18>
 404:	71 f4       	brne	.+28     	; 0x422 <__addsf3x+0x30>
 406:	9e f5       	brtc	.+102    	; 0x46e <__stack+0xf>
 408:	25 c1       	rjmp	.+586    	; 0x654 <__fp_zero>
 40a:	0e f4       	brtc	.+2      	; 0x40e <__addsf3x+0x1c>
 40c:	e0 95       	com	r30
 40e:	0b 2e       	mov	r0, r27
 410:	ba 2f       	mov	r27, r26
 412:	a0 2d       	mov	r26, r0
 414:	0b 01       	movw	r0, r22
 416:	b9 01       	movw	r22, r18
 418:	90 01       	movw	r18, r0
 41a:	0c 01       	movw	r0, r24
 41c:	ca 01       	movw	r24, r20
 41e:	a0 01       	movw	r20, r0
 420:	11 24       	eor	r1, r1
 422:	ff 27       	eor	r31, r31
 424:	59 1b       	sub	r21, r25
 426:	99 f0       	breq	.+38     	; 0x44e <__addsf3x+0x5c>
 428:	59 3f       	cpi	r21, 0xF9	; 249
 42a:	50 f4       	brcc	.+20     	; 0x440 <__addsf3x+0x4e>
 42c:	50 3e       	cpi	r21, 0xE0	; 224
 42e:	68 f1       	brcs	.+90     	; 0x48a <__stack+0x2b>
 430:	1a 16       	cp	r1, r26
 432:	f0 40       	sbci	r31, 0x00	; 0
 434:	a2 2f       	mov	r26, r18
 436:	23 2f       	mov	r18, r19
 438:	34 2f       	mov	r19, r20
 43a:	44 27       	eor	r20, r20
 43c:	58 5f       	subi	r21, 0xF8	; 248
 43e:	f3 cf       	rjmp	.-26     	; 0x426 <__addsf3x+0x34>
 440:	46 95       	lsr	r20
 442:	37 95       	ror	r19
 444:	27 95       	ror	r18
 446:	a7 95       	ror	r26
 448:	f0 40       	sbci	r31, 0x00	; 0
 44a:	53 95       	inc	r21
 44c:	c9 f7       	brne	.-14     	; 0x440 <__addsf3x+0x4e>
 44e:	7e f4       	brtc	.+30     	; 0x46e <__stack+0xf>
 450:	1f 16       	cp	r1, r31
 452:	ba 0b       	sbc	r27, r26
 454:	62 0b       	sbc	r22, r18
 456:	73 0b       	sbc	r23, r19
 458:	84 0b       	sbc	r24, r20
 45a:	ba f0       	brmi	.+46     	; 0x48a <__stack+0x2b>
 45c:	91 50       	subi	r25, 0x01	; 1
 45e:	a1 f0       	breq	.+40     	; 0x488 <__stack+0x29>
 460:	ff 0f       	add	r31, r31
 462:	bb 1f       	adc	r27, r27
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	c2 f7       	brpl	.-16     	; 0x45c <__addsf3x+0x6a>
 46c:	0e c0       	rjmp	.+28     	; 0x48a <__stack+0x2b>
 46e:	ba 0f       	add	r27, r26
 470:	62 1f       	adc	r22, r18
 472:	73 1f       	adc	r23, r19
 474:	84 1f       	adc	r24, r20
 476:	48 f4       	brcc	.+18     	; 0x48a <__stack+0x2b>
 478:	87 95       	ror	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f7 95       	ror	r31
 482:	9e 3f       	cpi	r25, 0xFE	; 254
 484:	08 f0       	brcs	.+2      	; 0x488 <__stack+0x29>
 486:	b3 cf       	rjmp	.-154    	; 0x3ee <__addsf3+0x1e>
 488:	93 95       	inc	r25
 48a:	88 0f       	add	r24, r24
 48c:	08 f0       	brcs	.+2      	; 0x490 <__stack+0x31>
 48e:	99 27       	eor	r25, r25
 490:	ee 0f       	add	r30, r30
 492:	97 95       	ror	r25
 494:	87 95       	ror	r24
 496:	08 95       	ret

00000498 <__divsf3>:
 498:	0c d0       	rcall	.+24     	; 0x4b2 <__divsf3x>
 49a:	a9 c0       	rjmp	.+338    	; 0x5ee <__fp_round>
 49c:	a1 d0       	rcall	.+322    	; 0x5e0 <__fp_pscB>
 49e:	40 f0       	brcs	.+16     	; 0x4b0 <__divsf3+0x18>
 4a0:	98 d0       	rcall	.+304    	; 0x5d2 <__fp_pscA>
 4a2:	30 f0       	brcs	.+12     	; 0x4b0 <__divsf3+0x18>
 4a4:	21 f4       	brne	.+8      	; 0x4ae <__divsf3+0x16>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <__divsf3+0x18>
 4aa:	8a c0       	rjmp	.+276    	; 0x5c0 <__fp_inf>
 4ac:	51 11       	cpse	r21, r1
 4ae:	d3 c0       	rjmp	.+422    	; 0x656 <__fp_szero>
 4b0:	8d c0       	rjmp	.+282    	; 0x5cc <__fp_nan>

000004b2 <__divsf3x>:
 4b2:	ae d0       	rcall	.+348    	; 0x610 <__fp_split3>
 4b4:	98 f3       	brcs	.-26     	; 0x49c <__divsf3+0x4>

000004b6 <__divsf3_pse>:
 4b6:	99 23       	and	r25, r25
 4b8:	c9 f3       	breq	.-14     	; 0x4ac <__divsf3+0x14>
 4ba:	55 23       	and	r21, r21
 4bc:	b1 f3       	breq	.-20     	; 0x4aa <__divsf3+0x12>
 4be:	95 1b       	sub	r25, r21
 4c0:	55 0b       	sbc	r21, r21
 4c2:	bb 27       	eor	r27, r27
 4c4:	aa 27       	eor	r26, r26
 4c6:	62 17       	cp	r22, r18
 4c8:	73 07       	cpc	r23, r19
 4ca:	84 07       	cpc	r24, r20
 4cc:	38 f0       	brcs	.+14     	; 0x4dc <__divsf3_pse+0x26>
 4ce:	9f 5f       	subi	r25, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	22 0f       	add	r18, r18
 4d4:	33 1f       	adc	r19, r19
 4d6:	44 1f       	adc	r20, r20
 4d8:	aa 1f       	adc	r26, r26
 4da:	a9 f3       	breq	.-22     	; 0x4c6 <__divsf3_pse+0x10>
 4dc:	33 d0       	rcall	.+102    	; 0x544 <__divsf3_pse+0x8e>
 4de:	0e 2e       	mov	r0, r30
 4e0:	3a f0       	brmi	.+14     	; 0x4f0 <__divsf3_pse+0x3a>
 4e2:	e0 e8       	ldi	r30, 0x80	; 128
 4e4:	30 d0       	rcall	.+96     	; 0x546 <__divsf3_pse+0x90>
 4e6:	91 50       	subi	r25, 0x01	; 1
 4e8:	50 40       	sbci	r21, 0x00	; 0
 4ea:	e6 95       	lsr	r30
 4ec:	00 1c       	adc	r0, r0
 4ee:	ca f7       	brpl	.-14     	; 0x4e2 <__divsf3_pse+0x2c>
 4f0:	29 d0       	rcall	.+82     	; 0x544 <__divsf3_pse+0x8e>
 4f2:	fe 2f       	mov	r31, r30
 4f4:	27 d0       	rcall	.+78     	; 0x544 <__divsf3_pse+0x8e>
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	bb 1f       	adc	r27, r27
 4fe:	26 17       	cp	r18, r22
 500:	37 07       	cpc	r19, r23
 502:	48 07       	cpc	r20, r24
 504:	ab 07       	cpc	r26, r27
 506:	b0 e8       	ldi	r27, 0x80	; 128
 508:	09 f0       	breq	.+2      	; 0x50c <__divsf3_pse+0x56>
 50a:	bb 0b       	sbc	r27, r27
 50c:	80 2d       	mov	r24, r0
 50e:	bf 01       	movw	r22, r30
 510:	ff 27       	eor	r31, r31
 512:	93 58       	subi	r25, 0x83	; 131
 514:	5f 4f       	sbci	r21, 0xFF	; 255
 516:	2a f0       	brmi	.+10     	; 0x522 <__divsf3_pse+0x6c>
 518:	9e 3f       	cpi	r25, 0xFE	; 254
 51a:	51 05       	cpc	r21, r1
 51c:	68 f0       	brcs	.+26     	; 0x538 <__divsf3_pse+0x82>
 51e:	50 c0       	rjmp	.+160    	; 0x5c0 <__fp_inf>
 520:	9a c0       	rjmp	.+308    	; 0x656 <__fp_szero>
 522:	5f 3f       	cpi	r21, 0xFF	; 255
 524:	ec f3       	brlt	.-6      	; 0x520 <__divsf3_pse+0x6a>
 526:	98 3e       	cpi	r25, 0xE8	; 232
 528:	dc f3       	brlt	.-10     	; 0x520 <__divsf3_pse+0x6a>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b7 95       	ror	r27
 532:	f7 95       	ror	r31
 534:	9f 5f       	subi	r25, 0xFF	; 255
 536:	c9 f7       	brne	.-14     	; 0x52a <__divsf3_pse+0x74>
 538:	88 0f       	add	r24, r24
 53a:	91 1d       	adc	r25, r1
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	97 f9       	bld	r25, 7
 542:	08 95       	ret
 544:	e1 e0       	ldi	r30, 0x01	; 1
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	bb 1f       	adc	r27, r27
 54e:	62 17       	cp	r22, r18
 550:	73 07       	cpc	r23, r19
 552:	84 07       	cpc	r24, r20
 554:	ba 07       	cpc	r27, r26
 556:	20 f0       	brcs	.+8      	; 0x560 <__divsf3_pse+0xaa>
 558:	62 1b       	sub	r22, r18
 55a:	73 0b       	sbc	r23, r19
 55c:	84 0b       	sbc	r24, r20
 55e:	ba 0b       	sbc	r27, r26
 560:	ee 1f       	adc	r30, r30
 562:	88 f7       	brcc	.-30     	; 0x546 <__divsf3_pse+0x90>
 564:	e0 95       	com	r30
 566:	08 95       	ret

00000568 <__fixunssfsi>:
 568:	5b d0       	rcall	.+182    	; 0x620 <__fp_splitA>
 56a:	88 f0       	brcs	.+34     	; 0x58e <__fixunssfsi+0x26>
 56c:	9f 57       	subi	r25, 0x7F	; 127
 56e:	90 f0       	brcs	.+36     	; 0x594 <__fixunssfsi+0x2c>
 570:	b9 2f       	mov	r27, r25
 572:	99 27       	eor	r25, r25
 574:	b7 51       	subi	r27, 0x17	; 23
 576:	a0 f0       	brcs	.+40     	; 0x5a0 <__fixunssfsi+0x38>
 578:	d1 f0       	breq	.+52     	; 0x5ae <__fixunssfsi+0x46>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	1a f0       	brmi	.+6      	; 0x58a <__fixunssfsi+0x22>
 584:	ba 95       	dec	r27
 586:	c9 f7       	brne	.-14     	; 0x57a <__fixunssfsi+0x12>
 588:	12 c0       	rjmp	.+36     	; 0x5ae <__fixunssfsi+0x46>
 58a:	b1 30       	cpi	r27, 0x01	; 1
 58c:	81 f0       	breq	.+32     	; 0x5ae <__fixunssfsi+0x46>
 58e:	62 d0       	rcall	.+196    	; 0x654 <__fp_zero>
 590:	b1 e0       	ldi	r27, 0x01	; 1
 592:	08 95       	ret
 594:	5f c0       	rjmp	.+190    	; 0x654 <__fp_zero>
 596:	67 2f       	mov	r22, r23
 598:	78 2f       	mov	r23, r24
 59a:	88 27       	eor	r24, r24
 59c:	b8 5f       	subi	r27, 0xF8	; 248
 59e:	39 f0       	breq	.+14     	; 0x5ae <__fixunssfsi+0x46>
 5a0:	b9 3f       	cpi	r27, 0xF9	; 249
 5a2:	cc f3       	brlt	.-14     	; 0x596 <__fixunssfsi+0x2e>
 5a4:	86 95       	lsr	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b3 95       	inc	r27
 5ac:	d9 f7       	brne	.-10     	; 0x5a4 <__fixunssfsi+0x3c>
 5ae:	3e f4       	brtc	.+14     	; 0x5be <__fixunssfsi+0x56>
 5b0:	90 95       	com	r25
 5b2:	80 95       	com	r24
 5b4:	70 95       	com	r23
 5b6:	61 95       	neg	r22
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

000005c0 <__fp_inf>:
 5c0:	97 f9       	bld	r25, 7
 5c2:	9f 67       	ori	r25, 0x7F	; 127
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	08 95       	ret

000005cc <__fp_nan>:
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	80 ec       	ldi	r24, 0xC0	; 192
 5d0:	08 95       	ret

000005d2 <__fp_pscA>:
 5d2:	00 24       	eor	r0, r0
 5d4:	0a 94       	dec	r0
 5d6:	16 16       	cp	r1, r22
 5d8:	17 06       	cpc	r1, r23
 5da:	18 06       	cpc	r1, r24
 5dc:	09 06       	cpc	r0, r25
 5de:	08 95       	ret

000005e0 <__fp_pscB>:
 5e0:	00 24       	eor	r0, r0
 5e2:	0a 94       	dec	r0
 5e4:	12 16       	cp	r1, r18
 5e6:	13 06       	cpc	r1, r19
 5e8:	14 06       	cpc	r1, r20
 5ea:	05 06       	cpc	r0, r21
 5ec:	08 95       	ret

000005ee <__fp_round>:
 5ee:	09 2e       	mov	r0, r25
 5f0:	03 94       	inc	r0
 5f2:	00 0c       	add	r0, r0
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0xc>
 5f6:	88 23       	and	r24, r24
 5f8:	52 f0       	brmi	.+20     	; 0x60e <__fp_round+0x20>
 5fa:	bb 0f       	add	r27, r27
 5fc:	40 f4       	brcc	.+16     	; 0x60e <__fp_round+0x20>
 5fe:	bf 2b       	or	r27, r31
 600:	11 f4       	brne	.+4      	; 0x606 <__fp_round+0x18>
 602:	60 ff       	sbrs	r22, 0
 604:	04 c0       	rjmp	.+8      	; 0x60e <__fp_round+0x20>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__fp_split3>:
 610:	57 fd       	sbrc	r21, 7
 612:	90 58       	subi	r25, 0x80	; 128
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	59 f0       	breq	.+22     	; 0x630 <__fp_splitA+0x10>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	71 f0       	breq	.+28     	; 0x63a <__fp_splitA+0x1a>
 61e:	47 95       	ror	r20

00000620 <__fp_splitA>:
 620:	88 0f       	add	r24, r24
 622:	97 fb       	bst	r25, 7
 624:	99 1f       	adc	r25, r25
 626:	61 f0       	breq	.+24     	; 0x640 <__fp_splitA+0x20>
 628:	9f 3f       	cpi	r25, 0xFF	; 255
 62a:	79 f0       	breq	.+30     	; 0x64a <__fp_splitA+0x2a>
 62c:	87 95       	ror	r24
 62e:	08 95       	ret
 630:	12 16       	cp	r1, r18
 632:	13 06       	cpc	r1, r19
 634:	14 06       	cpc	r1, r20
 636:	55 1f       	adc	r21, r21
 638:	f2 cf       	rjmp	.-28     	; 0x61e <__fp_split3+0xe>
 63a:	46 95       	lsr	r20
 63c:	f1 df       	rcall	.-30     	; 0x620 <__fp_splitA>
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__fp_splitA+0x30>
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	99 1f       	adc	r25, r25
 648:	f1 cf       	rjmp	.-30     	; 0x62c <__fp_splitA+0xc>
 64a:	86 95       	lsr	r24
 64c:	71 05       	cpc	r23, r1
 64e:	61 05       	cpc	r22, r1
 650:	08 94       	sec
 652:	08 95       	ret

00000654 <__fp_zero>:
 654:	e8 94       	clt

00000656 <__fp_szero>:
 656:	bb 27       	eor	r27, r27
 658:	66 27       	eor	r22, r22
 65a:	77 27       	eor	r23, r23
 65c:	cb 01       	movw	r24, r22
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret

00000662 <__gesf2>:
 662:	66 d0       	rcall	.+204    	; 0x730 <__fp_cmp>
 664:	08 f4       	brcc	.+2      	; 0x668 <__gesf2+0x6>
 666:	8f ef       	ldi	r24, 0xFF	; 255
 668:	08 95       	ret

0000066a <__mulsf3>:
 66a:	0b d0       	rcall	.+22     	; 0x682 <__mulsf3x>
 66c:	c0 cf       	rjmp	.-128    	; 0x5ee <__fp_round>
 66e:	b1 df       	rcall	.-158    	; 0x5d2 <__fp_pscA>
 670:	28 f0       	brcs	.+10     	; 0x67c <__mulsf3+0x12>
 672:	b6 df       	rcall	.-148    	; 0x5e0 <__fp_pscB>
 674:	18 f0       	brcs	.+6      	; 0x67c <__mulsf3+0x12>
 676:	95 23       	and	r25, r21
 678:	09 f0       	breq	.+2      	; 0x67c <__mulsf3+0x12>
 67a:	a2 cf       	rjmp	.-188    	; 0x5c0 <__fp_inf>
 67c:	a7 cf       	rjmp	.-178    	; 0x5cc <__fp_nan>
 67e:	11 24       	eor	r1, r1
 680:	ea cf       	rjmp	.-44     	; 0x656 <__fp_szero>

00000682 <__mulsf3x>:
 682:	c6 df       	rcall	.-116    	; 0x610 <__fp_split3>
 684:	a0 f3       	brcs	.-24     	; 0x66e <__mulsf3+0x4>

00000686 <__mulsf3_pse>:
 686:	95 9f       	mul	r25, r21
 688:	d1 f3       	breq	.-12     	; 0x67e <__mulsf3+0x14>
 68a:	95 0f       	add	r25, r21
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	55 1f       	adc	r21, r21
 690:	62 9f       	mul	r22, r18
 692:	f0 01       	movw	r30, r0
 694:	72 9f       	mul	r23, r18
 696:	bb 27       	eor	r27, r27
 698:	f0 0d       	add	r31, r0
 69a:	b1 1d       	adc	r27, r1
 69c:	63 9f       	mul	r22, r19
 69e:	aa 27       	eor	r26, r26
 6a0:	f0 0d       	add	r31, r0
 6a2:	b1 1d       	adc	r27, r1
 6a4:	aa 1f       	adc	r26, r26
 6a6:	64 9f       	mul	r22, r20
 6a8:	66 27       	eor	r22, r22
 6aa:	b0 0d       	add	r27, r0
 6ac:	a1 1d       	adc	r26, r1
 6ae:	66 1f       	adc	r22, r22
 6b0:	82 9f       	mul	r24, r18
 6b2:	22 27       	eor	r18, r18
 6b4:	b0 0d       	add	r27, r0
 6b6:	a1 1d       	adc	r26, r1
 6b8:	62 1f       	adc	r22, r18
 6ba:	73 9f       	mul	r23, r19
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	62 1f       	adc	r22, r18
 6c2:	83 9f       	mul	r24, r19
 6c4:	a0 0d       	add	r26, r0
 6c6:	61 1d       	adc	r22, r1
 6c8:	22 1f       	adc	r18, r18
 6ca:	74 9f       	mul	r23, r20
 6cc:	33 27       	eor	r19, r19
 6ce:	a0 0d       	add	r26, r0
 6d0:	61 1d       	adc	r22, r1
 6d2:	23 1f       	adc	r18, r19
 6d4:	84 9f       	mul	r24, r20
 6d6:	60 0d       	add	r22, r0
 6d8:	21 1d       	adc	r18, r1
 6da:	82 2f       	mov	r24, r18
 6dc:	76 2f       	mov	r23, r22
 6de:	6a 2f       	mov	r22, r26
 6e0:	11 24       	eor	r1, r1
 6e2:	9f 57       	subi	r25, 0x7F	; 127
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	8a f0       	brmi	.+34     	; 0x70a <__mulsf3_pse+0x84>
 6e8:	e1 f0       	breq	.+56     	; 0x722 <__mulsf3_pse+0x9c>
 6ea:	88 23       	and	r24, r24
 6ec:	4a f0       	brmi	.+18     	; 0x700 <__mulsf3_pse+0x7a>
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	bb 1f       	adc	r27, r27
 6f4:	66 1f       	adc	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	50 40       	sbci	r21, 0x00	; 0
 6fe:	a9 f7       	brne	.-22     	; 0x6ea <__mulsf3_pse+0x64>
 700:	9e 3f       	cpi	r25, 0xFE	; 254
 702:	51 05       	cpc	r21, r1
 704:	70 f0       	brcs	.+28     	; 0x722 <__mulsf3_pse+0x9c>
 706:	5c cf       	rjmp	.-328    	; 0x5c0 <__fp_inf>
 708:	a6 cf       	rjmp	.-180    	; 0x656 <__fp_szero>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	ec f3       	brlt	.-6      	; 0x708 <__mulsf3_pse+0x82>
 70e:	98 3e       	cpi	r25, 0xE8	; 232
 710:	dc f3       	brlt	.-10     	; 0x708 <__mulsf3_pse+0x82>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f7 95       	ror	r31
 71c:	e7 95       	ror	r30
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	c1 f7       	brne	.-16     	; 0x712 <__mulsf3_pse+0x8c>
 722:	fe 2b       	or	r31, r30
 724:	88 0f       	add	r24, r24
 726:	91 1d       	adc	r25, r1
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__fp_cmp>:
 730:	99 0f       	add	r25, r25
 732:	00 08       	sbc	r0, r0
 734:	55 0f       	add	r21, r21
 736:	aa 0b       	sbc	r26, r26
 738:	e0 e8       	ldi	r30, 0x80	; 128
 73a:	fe ef       	ldi	r31, 0xFE	; 254
 73c:	16 16       	cp	r1, r22
 73e:	17 06       	cpc	r1, r23
 740:	e8 07       	cpc	r30, r24
 742:	f9 07       	cpc	r31, r25
 744:	c0 f0       	brcs	.+48     	; 0x776 <__fp_cmp+0x46>
 746:	12 16       	cp	r1, r18
 748:	13 06       	cpc	r1, r19
 74a:	e4 07       	cpc	r30, r20
 74c:	f5 07       	cpc	r31, r21
 74e:	98 f0       	brcs	.+38     	; 0x776 <__fp_cmp+0x46>
 750:	62 1b       	sub	r22, r18
 752:	73 0b       	sbc	r23, r19
 754:	84 0b       	sbc	r24, r20
 756:	95 0b       	sbc	r25, r21
 758:	39 f4       	brne	.+14     	; 0x768 <__fp_cmp+0x38>
 75a:	0a 26       	eor	r0, r26
 75c:	61 f0       	breq	.+24     	; 0x776 <__fp_cmp+0x46>
 75e:	23 2b       	or	r18, r19
 760:	24 2b       	or	r18, r20
 762:	25 2b       	or	r18, r21
 764:	21 f4       	brne	.+8      	; 0x76e <__fp_cmp+0x3e>
 766:	08 95       	ret
 768:	0a 26       	eor	r0, r26
 76a:	09 f4       	brne	.+2      	; 0x76e <__fp_cmp+0x3e>
 76c:	a1 40       	sbci	r26, 0x01	; 1
 76e:	a6 95       	lsr	r26
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	81 1d       	adc	r24, r1
 774:	81 1d       	adc	r24, r1
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
