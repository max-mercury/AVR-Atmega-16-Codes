
SimpleButton2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000880  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000032f  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000095  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000295  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ba  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000030  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/interrupt.h>

//Two Leds Toggle
void main()
{
	DDRC |= (1 << PINC0); //0 as output
  92:	a0 9a       	sbi	0x14, 0	; 20
	PORTC ^= (1<<PINC0);
  94:	95 b3       	in	r25, 0x15	; 21
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	89 27       	eor	r24, r25
  9a:	85 bb       	out	0x15, r24	; 21
	DDRC |= (1<< PINC2);  // 2 as output
  9c:	a2 9a       	sbi	0x14, 2	; 20
	DDRD &= ~(1 << PIND1);//1 as input
  9e:	89 98       	cbi	0x11, 1	; 17
	PORTD |= (1 << PIND1);//set high
  a0:	91 9a       	sbi	0x12, 1	; 18
	int pressed=0;
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
				pressed = 1;
			}
		}
		else
		{
			pressed = 0;
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(bit_is_clear(PIND,0))
		{
			if(pressed == 0)
			{
				PORTC ^= 1<< PINC0;
  aa:	71 e0       	ldi	r23, 0x01	; 1
				PORTC ^= 1<< PINC2;
  ac:	64 e0       	ldi	r22, 0x04	; 4
				pressed = 1;
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x24>
			}
		}
		else
		{
			pressed = 0;
  b4:	c9 01       	movw	r24, r18
	DDRD &= ~(1 << PIND1);//1 as input
	PORTD |= (1 << PIND1);//set high
	int pressed=0;
	while(1)
	{
		if(bit_is_clear(PIND,0))
  b6:	80 99       	sbic	0x10, 0	; 16
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x22>
		{
			if(pressed == 0)
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x24>
			{
				PORTC ^= 1<< PINC0;
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	87 27       	eor	r24, r23
  c2:	85 bb       	out	0x15, r24	; 21
				PORTC ^= 1<< PINC2;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	86 27       	eor	r24, r22
  c8:	85 bb       	out	0x15, r24	; 21
				pressed = 1;
  ca:	ca 01       	movw	r24, r20
  cc:	f4 cf       	rjmp	.-24     	; 0xb6 <main+0x24>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
