
BasicTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000168  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000034d  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c1  00000000  00000000  00000c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000b6  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int extraTime = 0;

int main(void)
{
	DDRC |= (1<<PINC0);
  92:	a0 9a       	sbi	0x14, 0	; 20
	TCCR0 |= (1 << WGM01); //Set CTC Bit
  94:	83 b7       	in	r24, 0x33	; 51
  96:	88 60       	ori	r24, 0x08	; 8
  98:	83 bf       	out	0x33, r24	; 51
	OCR0 = 15625;
  9a:	89 e0       	ldi	r24, 0x09	; 9
  9c:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	89 bf       	out	0x39, r24	; 57
	
	sei();
  a2:	78 94       	sei
	
	TCCR0 |= (1 << CS00) | (1 << CS02); //start at 1024 prescalar
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	85 60       	ori	r24, 0x05	; 5
  a8:	83 bf       	out	0x33, r24	; 51
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x18>

000000ac <__vector_19>:
		
	}
}

ISR(TIMER0_COMP_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	extraTime++;
  ba:	80 91 60 00 	lds	r24, 0x0060
  be:	90 91 61 00 	lds	r25, 0x0061
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 61 00 	sts	0x0061, r25
  c8:	80 93 60 00 	sts	0x0060, r24
	
	if(extraTime > 100)
  cc:	85 36       	cpi	r24, 0x65	; 101
  ce:	91 05       	cpc	r25, r1
  d0:	44 f0       	brlt	.+16     	; 0xe2 <__vector_19+0x36>
	{
		extraTime = 0;
  d2:	10 92 61 00 	sts	0x0061, r1
  d6:	10 92 60 00 	sts	0x0060, r1
		PORTC ^= (1 << PINC0);
  da:	95 b3       	in	r25, 0x15	; 21
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	89 27       	eor	r24, r25
  e0:	85 bb       	out	0x15, r24	; 21
	}
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
